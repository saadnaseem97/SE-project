const fs = require('fs'),
	http = require('http'),
	socketio = require('socket.io')

const readFile = file => new Promise ((resolve,reject) => 
	fs.readFile(file , (err,data) => err ? reject(err) : resolve(data)))

const server = http.createServer(async (request , response) => {
	try {
		response.end(await readFile (request.url.substr(1)))
	} catch (err) {
		response.end()
	}
})

let clients = []
let opponent_username = {}
let sockets = {}
let gameBoards = {}
let games = []
let name = []
let toPlay = 0

const io = socketio(server)

const valid = (id,userName,tag,type) =>
{
	let change = false
	let op_present = false
	a = parseInt(id[0])
	b = parseInt(id[1])
	let board = gameBoards[userName]
	// console.log(board)
	if (board[a][b] !== 0)
	{
		sockets[opponent_username[userName]].emit('setOpMove' ,tag,id, false, false)
		sockets[userName].emit('setOpMove' ,tag,id, true,false)
		return
	}
	let index = -1
	if (a != 7)
	{
		for(i = a+1; i< 8; i++)
		{
			if (board[i][b] === tag)
			{
				index = i
				break
			}
			else if (board[i][b] === 0)
			{
				index = -2
				break
			}
			else
				op_present = true
		}
	}
	if (index > -1 && op_present === true)
	{
		change = true
		for (i = a; i<=index;i++)
			board[i][b] = tag
	}

	index = -1
	op_present = false
	if (a != 0)
	{
		for(i = a-1; i >= 0; i--)
		{
			if (board[i][b] === tag)
			{
				index = i
				break
			}
			else if (board[i][b] === 0)
			{
				index = -2
				break
			}
			else
				op_present = true
		}
	}

	if (index > -1 && op_present === true)
	{
		change = true
		for (i = index; i< a;i++)
			board[i][b] = tag
	}

	index = -1
	op_present = false
	if (b != 7)
	{
		for(i = b+1; i< 8; i++)
		{
			if (board[a][i] === tag)
			{
				index = i
				break
			}
			else if (board[a][i] === 0)
			{
				index = -2
				break
			}
			else
				op_present = true
		}
	}
	if (index > -1 && op_present === true)
	{
		change = true
		for (i = b; i<=index;i++)
			board[a][i] = tag
	}

	index = -1
	op_present = false
	if (b != 0)
	{
		for(i = b-1; i >= 0; i--)
		{
			if (board[a][i] === tag)
			{
				index = i
				break
			}
			else if (board[a][i] === 0)
			{
				index = -2
				break
			}
			else
				op_present = true
		}
	}
	if (index > -1 && op_present === true)
	{
		change = true
		for (i = index; i< b;i++)
			board[a][i] = tag
	}

	index = 0
	op_present = false
	while(1)
	{
		a++
		b++
		if (a > 7 || b > 7)
		{
			index = -2
			break
		}
		else if (board[a][b] === tag)
			break
		else if (board[a][b] === 0)
		{
			index = -2
			break
		}
		else
			op_present = true

		index++
		
	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && op_present === true)
	{
		change = true
		for (i = 0; i< index+1;i++)
			board[a+i][b+i] = tag
	}

	index = 0
	op_present = false
	while(1)
	{
		a++
		b--
		if (a > 7 || b < 0)
		{
			index = -2
			break
		}
		else if (board[a][b] === 0)
		{
			index = -2
			break
		}
		else if (board[a][b] === tag)
			break
		else
			op_present = true
		index++

	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && op_present === true)
	{
		change = true
		for (i = 0; i< index+1;i++)
			board[a+i][b-i] = tag
	}

	index = 0
	op_present = false
	while(1)
	{
		a--
		b++
		if (a < 0 || b > 7)
		{
			index = -2
			break
		}
		else if (board[a][b] === 0)
		{
			index = -2
			break
		}
		else if (board[a][b] === tag)
			break
		else
			op_present = true
		index++
	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && op_present === true)
	{
		change = true
		for (i = 0; i< index+1;i++)
			board[a-i][b+i] = tag
	}

	index = 0
	op_present = false
	while(1)
	{
		a--
		b--
		if (a < 0 || b < 0)
		{
			index = -2
			break
		}
		else if (board[a][b] === 0)
		{
			index = -2
			break
		}
		else if (board[a][b] === tag)
			break
		else
			op_present = true
		index++
	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && op_present === true)
	{
		change = true
		for (i = 0; i< index+1;i++)
			board[a-i][b-i] = tag
	}

	if (change === false)
	{
		sockets[opponent_username[userName]].emit('setOpMove' ,tag,id, false, false)
		sockets[userName].emit('setOpMove' ,tag,id, true,false)
	}
	else
	{
		board[a][b] = tag
		gameBoards[userName] = board
		gameBoards[opponent_username[userName]] = board
		sockets[opponent_username[userName]].emit('setOpMove' ,tag,id, false, true,board)
		sockets[userName].emit('setOpMove' ,tag,id, true,true,board)

		if (matchEnded(board, tag))
		{
			let tag1 = 0
			let tag2 = 0
			let win_tag = ''
			for (i = 0; i< 8; i++)
			{
				for (j = 0; j < 8; j++)
				{
					if (board[i][j] === '1')
						tag1++
					else if (board[i][j] === '-1')
						tag2++
				}
			}
			if (tag1 > tag2)
				win_tag = '1'
			else if (tag2 > tag1)
				win_tag = '-1'
			else
				win_tag = 0
			sockets[opponent_username[userName]].emit('game_ended' , win_tag)
			sockets[userName].emit('game_ended' , win_tag)
		}
	}
}

const validMove = (id, array1, tag) =>
{
	let myChange = false
	let opPresent = false
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (array1[a][b] !==0)
		return false
	let index = -1
	if (a != 7)
	{
		for(i = a+1; i< 8; i++)
		{
			if (array1[i][b] === tag)
			{
				index = i
				break
			}
			else if (array1[i][b] === 0)
			{
				index = -2
				break
			}
			else
				opPresent = true
		}
	}
	if (index > -1 && opPresent === true)
		myChange = true

	index = -1
	opPresent = false
	if (a != 0)
	{
		for(i = a-1; i >= 0; i--)
		{
			if (array1[i][b] === tag)
			{
				index = i
				break
			}
			else if (array1[i][b] === 0)
			{
				index = -2
				break
			}
			else
				opPresent = true
		}
	}

	if (index > -1 && opPresent === true)
		myChange = true

	index = -1
	opPresent = false
	if (b != 7)
	{
		for(i = b+1; i< 8; i++)
		{
			if (array1[a][i] === tag)
			{
				index = i
				break
			}
			else if (array1[a][i] === 0)
			{
				index = -2
				break
			}
			else
				opPresent = true
		}
	}
	if (index > -1 && opPresent === true)
		myChange = true

	index = -1
	opPresent = false
	if (b != 0)
	{
		for(i = b-1; i >= 0; i--)
		{
			if (array1[a][i] === tag)
			{
				index = i
				break
			}
			else if (array1[a][i] === 0)
			{
				index = -2
				break
			}
			else
				opPresent = true
		}
	}
	if (index > -1 && opPresent === true)
		myChange = true

	index = 0
	opPresent = false
	while(1)
	{
		a++
		b++
		if (a > 7 || b > 7)
		{
			index = -2
			break
		}
		else if (array1[a][b] === tag)
			break
		else if (array1[a][b] === 0)
		{
			index = -2
			break
		}
		else
			opPresent = true

		index++
		
	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && opPresent === true)
		myChange = true

	index = 0
	opPresent = false
	while(1)
	{
		a++
		b--
		if (a > 7 || b < 0)
		{
			index = -2
			break
		}
		else if (array1[a][b] === 0)
		{
			index = -2
			break
		}
		else if (array1[a][b] === tag)
			break
		else
			opPresent = true
		index++

	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && opPresent === true)
		myChange = true

	index = 0
	opPresent = false
	while(1)
	{
		a--
		b++
		if (a < 0 || b > 7)
		{
			index = -2
			break
		}
		else if (array1[a][b] === 0)
		{
			index = -2
			break
		}
		else if (array1[a][b] === tag)
			break
		else
			opPresent = true
		index++
	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && opPresent === true)
		myChange = true


	index = 0
	opPresent = false
	while(1)
	{
		a--
		b--
		if (a < 0 || b < 0)
		{
			index = -2
			break
		}
		else if (array1[a][b] === 0)
		{
			index = -2
			break
		}
		else if (array1[a][b] === tag)
			break
		else
			opPresent = true
		index++
	}
	a = parseInt(id[0])
	b = parseInt(id[1])
	if (index > -1 && opPresent === true)
		myChange = true

	if (myChange === false)
		return false
	else
		return true
}

// const validMove = (id,array,tag) =>
// {
// 	console.log(id)
// 	return true
// }

const matchEnded = (array, tag) =>{
	check = true

	// array.forEach(cell =>{
	// 	if (validMove((String(i) + String(j)) , array, tag))
	// 		check = false
	// })
	// return check
	if (tag === '1')
		check_tag = '-1'
	else
		check_tag = '1'
	for (i1 = 0; i1 < 8; i1++)
	{
		for (j1 = 0; j1 < 8; j1++)
		{
			if (array[i1][j1] === 0)
			{

				if (validMove(`${i1}${j1}` , array , check_tag))
				{

					check = false
					break
				}
			}		
		}
		if (check === false)
			break
	}
	return check
}

io.sockets.on('connection' , socket => {
	// if ((toPlay > 0) && (toPlay % 2 === 0))
	// {
	// 	console.log('CAME TO IF')
		
	// }
	// else{
	socket.emit('wait', 'Please Wait for another Player to join')
		// console.log('came to else')
	// }
	// socket.on('disconnect', () => clients = clients.filter(s => s!== socket))
	socket.on('send_name' , data => {
		name.push(data)
		clients = [... clients, socket]
		toPlay = toPlay + 1
		if (toPlay % 2 === 0){
			games = [... games , [clients[toPlay-1], clients[toPlay-2]]]
			opponent_username[name[toPlay-2]] = name[toPlay-1]
			opponent_username[name[toPlay-1]] = name[toPlay-2]

			sockets[name[toPlay-2]] = socket
			sockets[name[toPlay-1]] = clients[toPlay-2]

			gameBoards[name[toPlay-2]] = new Array(8).fill(0).map(e => new Array(8).fill(0))
			gameBoards[name[toPlay-2]][3][3] = '-1'
			gameBoards[name[toPlay-2]][3][4] = '1'
			gameBoards[name[toPlay-2]][4][3] = '1'
			gameBoards[name[toPlay-2]][4][4] = '-1'

			gameBoards[name[toPlay-1]] = new Array(8).fill(0).map(e => new Array(8).fill(0))
			gameBoards[name[toPlay-1]][3][3] = '-1'
			gameBoards[name[toPlay-1]][3][4] = '1'
			gameBoards[name[toPlay-1]][4][3] = '1'
			gameBoards[name[toPlay-1]][4][4] = '-1'

			socket.emit('Start_match' , '1',name[toPlay-2],true)
			clients[toPlay-2].emit('Start_match', '-1', name[toPlay-1],false)
		}
	})
	socket.on('after_move', (tag,id, userName, board) =>{
		valid(id, userName,tag,'move')

		
	})
})

server.listen(3000, () => console.log('Server listening'))